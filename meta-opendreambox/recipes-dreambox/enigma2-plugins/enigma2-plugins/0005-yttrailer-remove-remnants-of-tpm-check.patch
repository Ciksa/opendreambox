From c2c100debffdbcaa64ea389214b85bc5600d95ba Mon Sep 17 00:00:00 2001
From: Andreas Oberritter <obi@opendreambox.org>
Date: Thu, 11 Apr 2019 14:47:24 +0200
Subject: [PATCH] yttrailer: remove remnants of tpm check

---
 yttrailer/src/__init__.py | 42 ---------------------------------------
 yttrailer/src/plugin.py   |  6 +-----
 2 files changed, 1 insertion(+), 47 deletions(-)

diff --git a/yttrailer/src/__init__.py b/yttrailer/src/__init__.py
index f9f42e8f..e69de29b 100644
--- a/yttrailer/src/__init__.py
+++ b/yttrailer/src/__init__.py
@@ -1,42 +0,0 @@
-# -*- coding: utf-8 -*-
-import sha
-rootkey = ['\x9f', '|', '\xe4', 'G', '\xc9', '\xb4', '\xf4', '#', '&', '\xce', '\xb3', '\xfe', '\xda', '\xc9', 'U', '`', '\xd8', '\x8c', 's', 'o', '\x90', '\x9b', '\\', 'b', '\xc0', '\x89', '\xd1', '\x8c', '\x9e', 'J', 'T', '\xc5', 'X', '\xa1', '\xb8', '\x13', '5', 'E', '\x02', '\xc9', '\xb2', '\xe6', 't', '\x89', '\xde', '\xcd', '\x9d', '\x11', '\xdd', '\xc7', '\xf4', '\xe4', '\xe4', '\xbc', '\xdb', '\x9c', '\xea', '}', '\xad', '\xda', 't', 'r', '\x9b', '\xdc', '\xbc', '\x18', '3', '\xe7', '\xaf', '|', '\xae', '\x0c', '\xe3', '\xb5', '\x84', '\x8d', '\r', '\x8d', '\x9d', '2', '\xd0', '\xce', '\xd5', 'q', '\t', '\x84', 'c', '\xa8', ')', '\x99', '\xdc', '<', '"', 'x', '\xe8', '\x87', '\x8f', '\x02', ';', 'S', 'm', '\xd5', '\xf0', '\xa3', '_', '\xb7', 'T', '\t', '\xde', '\xa7', '\xf1', '\xc9', '\xae', '\x8a', '\xd7', '\xd2', '\xcf', '\xb2', '.', '\x13', '\xfb', '\xac', 'j', '\xdf', '\xb1', '\x1d', ':', '?']
-l2key = None
-
-
-def bin2long(s):
-	return reduce( lambda x,y:(x<<8L)+y, map(ord, s))
-
-def long2bin(l):
-	res = ""
-	for byte in range(128):
-		res += chr((l >> (1024 - (byte + 1) * 8)) & 0xff)
-	return res
-
-def rsa_pub1024(src, mod):
-	return long2bin(pow(bin2long(src), 65537, bin2long(mod)))
-	
-def decrypt_block(src, mod):
-	if len(src) != 128 and len(src) != 202:
-		return None
-	dest = rsa_pub1024(src[:128], mod)
-	hash = sha.new(dest[1:107])
-	if len(src) == 202:
-		hash.update(src[131:192])	
-	result = hash.digest()
-	if result == dest[107:127]:
-		return dest
-	return None
-
-def validate_cert(cert, key):
-	buf = decrypt_block(cert[8:], key) 
-	if buf is None:
-		return None
-	return buf[36:107] + cert[139:196]
-	
-def read_random():
-	fd = open("/dev/urandom", "r")
-	buf = fd.read(8)
-	fd.close()
-	return buf
-
diff --git a/yttrailer/src/plugin.py b/yttrailer/src/plugin.py
index c438cfa6..1557350e 100644
--- a/yttrailer/src/plugin.py
+++ b/yttrailer/src/plugin.py
@@ -19,7 +19,6 @@
 #  This applies to the source code as a whole as well as to parts of it, unless
 #  explicitely stated otherwise.
 
-from __init__ import decrypt_block, validate_cert, read_random, rootkey, l2key
 from Screens.Screen import Screen
 from Plugins.Plugin import PluginDescriptor
 from Components.ActionMap import ActionMap, HelpableActionMap
@@ -27,7 +26,7 @@ from Components.PluginComponent import plugins
 from Plugins.Plugin import PluginDescriptor
 from Components.Sources.StaticText import StaticText
 from Components.GUIComponent import GUIComponent
-from enigma import eServiceReference,  RT_WRAP, RT_VALIGN_CENTER, RT_HALIGN_LEFT, gFont, eListbox, eListboxPythonMultiContent, eTPM
+from enigma import eServiceReference,  RT_WRAP, RT_VALIGN_CENTER, RT_HALIGN_LEFT, gFont, eListbox, eListboxPythonMultiContent
 
 from Components.config import config, ConfigSubsection, ConfigSelection, getConfigListEntry, configfile, ConfigText, ConfigInteger, ConfigYesNo
 from Components.ConfigList import ConfigListScreen
@@ -42,8 +41,6 @@ config.plugins.yttrailer.ext_descr = ConfigText(default="german", fixed_size = F
 config.plugins.yttrailer.max_results =  ConfigInteger(5,limits = (1, 10))
 config.plugins.yttrailer.close_player_with_exit =  ConfigYesNo(default = False)
 
-etpm = eTPM()
-
 from Plugins.SystemPlugins.TubeLib.youtube.Base import buildYoutube
 from Plugins.SystemPlugins.TubeLib.youtube.Search import Search
 from Plugins.SystemPlugins.TubeLib.youtube.Videos import Videos
@@ -78,7 +75,6 @@ class YTTrailer:
 		self.session = session
 		self._youtube = None
 		self._query = None
-		self.l3cert = etpm.getData(eTPM.DT_LEVEL3_CERT)
 
 	def showTrailer(self, eventname):
 		if eventname:
