diff --git a/autoresolution/src/plugin.py b/autoresolution/src/plugin.py
index 950c393..1351764 100644
--- a/autoresolution/src/plugin.py
+++ b/autoresolution/src/plugin.py
@@ -9,8 +9,9 @@ from Components.ActionMap import ActionMap
 from Components.Label import Label
 from Components.Sources.StaticText import StaticText
 from enigma import iPlayableService, iServiceInformation, eTimer, getDesktop
+from Components.DisplayHardware import DisplayHardware
 from Plugins.Plugin import PluginDescriptor
-from Plugins.SystemPlugins.Videomode.VideoHardware import video_hw # depends on Videomode Plugin
+import re
 
 usable = False
 preferedmodes = None
@@ -43,10 +44,10 @@ config.plugins.autoresolution.delay_switch_mode = ConfigSelection(default = "100
 		("8000", "8 " + _("seconds")), ("9000", "9 " + _("seconds")), ("10000", "10 " + _("seconds")),("60000", "60 " + _("seconds"))])
 
 def setDeinterlacer(mode):
-	print "[AutoRes] switch deinterlacer mode to %s" % mode
-	f = open('/proc/stb/vmpeg/deinterlace' , "w")
-	f.write("%s\n" % mode)
-	f.close()
+	print "[AutoRes] switch deinterlacer mode to %s (currently not working)" % mode
+	#f = open('/proc/stb/vmpeg/deinterlace' , "w")
+	#f.write("%s\n" % mode)
+	#f.close()
 
 frqdic = { 23976: '24', \
 		24000: '24', \
@@ -134,7 +135,7 @@ class AutoRes(Screen):
 			global videoresolution_dictionary
 			print "mode changed to", configEntry.value
 			default = (configEntry.value, _("default"))
-			preferedmodes = [mode[0] for mode in video_hw.getModeList(port) if mode[0] != default[0]]
+			preferedmodes = [mode for mode in DisplayHardware.instance.getGroupedModeList(port) if mode != default[0]]
 			preferedmodes.append(default)
 			print "default", default
 			print "preferedmodes", preferedmodes
@@ -249,16 +250,7 @@ class AutoRes(Screen):
 	def changeVideomode(self):
 		if usable:
 			mode = self.lastmode
-			if mode.find("0p30") != -1 or mode.find("0p24") != -1 or mode.find("0p25") != -1:
-				print "[AutoRes] switching to", mode
-				v = open('/proc/stb/video/videomode' , "w")
-				v.write("%s\n" % mode)
-				v.close()
-				resolutionlabel["restxt"].setText("Videomode: %s" % mode)
-				if config.plugins.autoresolution.showinfo.value:
-					resolutionlabel.show()
-			else:
-				self.setMode(mode)
+			self.setMode(mode)
 			if config.plugins.autoresolution.testmode.value and default[0] != mode:
 				resolutionlabeltxt = "Videomode: %s" % mode
 				self.session.openWithCallback(
@@ -279,14 +271,21 @@ class AutoRes(Screen):
 			self.setMode(default[0])
 
 	def setMode(self, mode, set=True):
-		rate = config.av.videorate[mode].value
 		port_txt = "HDMI" if port == "DVI" else port
+
+		if mode.find("0p30") != -1 or mode.find("0p24") != -1 or mode.find("0p25") != -1:
+			match = re.search(r"(\d*?[ip])(\d*?)$", mode)
+			mode = match.group(1)
+			rate = match.group(2) + "Hz"
+		else:
+			rate = config.av.videorate[mode].value
+
 		resolutionlabel["restxt"].setText("Videomode: %s %s %s" % (port_txt, mode, rate))
 		if set:
 			print "[AutoRes] switching to %s %s %s" % (port_txt, mode, rate)
 			if config.plugins.autoresolution.showinfo.value:
 				resolutionlabel.show()
-			video_hw.setMode(port, mode, rate)
+			DisplayHardware.instance.setMode(port, mode, rate)
 		self.lastmode = mode
 
 class ResolutionLabel(Screen):
