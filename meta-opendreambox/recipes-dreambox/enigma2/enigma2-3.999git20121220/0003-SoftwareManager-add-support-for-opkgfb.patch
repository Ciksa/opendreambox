From aeb445303b7ce783b905b64a014d8977f0abafb7 Mon Sep 17 00:00:00 2001
From: Mladen Horvat <acid-burn@opendreambox.org>
Date: Fri, 21 Dec 2012 11:02:12 +0100
Subject: [PATCH 3/5] SoftwareManager: - add support for opkgfb - run opkg
 commands from within /tmp - cleanup unused code, fixes
 #981

---
 .../SystemPlugins/SoftwareManager/SoftwareTools.py |   43 ++++++--
 .../SystemPlugins/SoftwareManager/plugin.py        |  114 +++++++++++++-------
 2 files changed, 113 insertions(+), 44 deletions(-)

diff --git a/usr/lib/enigma2/python/Plugins/SystemPlugins/SoftwareManager/SoftwareTools.py b/usr/lib/enigma2/python/Plugins/SystemPlugins/SoftwareManager/SoftwareTools.py
index 41a57d0..5062f3d 100644
--- a/usr/lib/enigma2/python/Plugins/SystemPlugins/SoftwareManager/SoftwareTools.py
+++ b/usr/lib/enigma2/python/Plugins/SystemPlugins/SoftwareManager/SoftwareTools.py
@@ -64,6 +64,8 @@ class SoftwareTools(DreamInfoHandler):
 	available_updatelist  = []
 	available_packetlist  = []
 	installed_packetlist = {}
+	upgradable_packages = {}
+	upgradeAvailable = False
 
 	def __init__(self):
 		aboutInfo = about.getImageVersionString()
@@ -79,8 +81,10 @@ class SoftwareTools(DreamInfoHandler):
 		self.NotifierCallback = None
 		self.Console = Console()
 		self.UpdateConsole = Console()
+		self.UpgradeConsole = Console()
 		self.cmdList = []
 		self.unwanted_extensions = ('-dbg', '-dev', '-doc')
+		self.reboot_required_packages = ('dreambox-dvb-modules', 'kernel-')
 		self.ipkg = IpkgComponent()
 		self.ipkg.addCallback(self.ipkgCallback)		
 
@@ -207,7 +211,7 @@ class SoftwareTools(DreamInfoHandler):
 		if self.list_updating:
 			if not self.UpdateConsole:
 				self.UpdateConsole = Console()
-			cmd = "opkg list"
+			cmd = "cd /tmp && opkg list"
 			self.UpdateConsole.ePopen(cmd, self.IpkgListAvailableCB, callback)
 
 	def IpkgListAvailableCB(self, result, retval, extra_args = None):
@@ -243,7 +247,7 @@ class SoftwareTools(DreamInfoHandler):
 			if self.NetworkConnectionAvailable == True:
 				if not self.UpdateConsole:
 					self.UpdateConsole = Console()
-				cmd = "opkg install enigma2-meta enigma2-plugins-meta enigma2-skins-meta"
+				cmd = "cd /tmp && opkg install enigma2-meta enigma2-plugins-meta enigma2-skins-meta"
 				self.UpdateConsole.ePopen(cmd, self.InstallMetaPackageCB, callback)
 			else:
 				self.InstallMetaPackageCB(True)
@@ -271,7 +275,7 @@ class SoftwareTools(DreamInfoHandler):
 		if self.list_updating:
 			if not self.UpdateConsole:
 				self.UpdateConsole = Console()
-			cmd = "opkg list-installed"
+			cmd = "cd /tmp && opkg list-installed"
 			self.UpdateConsole.ePopen(cmd, self.IpkgListInstalledCB, callback)
 
 	def IpkgListInstalledCB(self, result, retval, extra_args = None):
@@ -294,7 +298,7 @@ class SoftwareTools(DreamInfoHandler):
 					if attributes["packagetype"] == "internal":
 						self.packagesIndexlist.remove(package)
 			if callback is None:
-				self.countUpdates()
+				self.listUpgradable()
 			else:
 				if self.UpdateConsole:
 					if len(self.UpdateConsole.appContainers) == 0:
@@ -306,9 +310,26 @@ class SoftwareTools(DreamInfoHandler):
 					if callback is not None:
 						callback(False)
 
-	def countUpdates(self, callback = None):
+	def listUpgradable(self, callback = None):
+		self.list_updating = True
+		if not self.UpgradeConsole:
+			self.UpgradeConsole = Console()
+		cmd = "cd /tmp && opkg list-upgradable"
+		self.UpgradeConsole.ePopen(cmd, self.listUpgradableCB, callback)
+
+	def listUpgradableCB(self, result, retval, extra_args = None):
+		(callback) = extra_args
+		self.upgradable_packages = {}
 		self.available_updates = 0
 		self.available_updatelist  = []
+		if result:
+			for x in result.splitlines():
+				tokens = x.split(' - ')
+				name = tokens[0].strip()
+				if not any(name.endswith(x) for x in self.unwanted_extensions):
+					l = len(tokens)
+					version = l > 2 and tokens[2].strip() or ""
+					self.upgradable_packages[name] = version
 		for package in self.packagesIndexlist[:]:
 			attributes = package[0]["attributes"]
 			packagename = attributes["packagename"]
@@ -318,10 +339,11 @@ class SoftwareTools(DreamInfoHandler):
 						if self.installed_packetlist[packagename] != x[1]:
 							self.available_updates +=1
 							self.available_updatelist.append([packagename])
-
 		self.list_updating = False
-		if self.UpdateConsole:
-			if len(self.UpdateConsole.appContainers) == 0:
+		if self.upgradable_packages:
+			self.upgradeAvailable = True
+		if self.UpgradeConsole:
+			if len(self.UpgradeConsole.appContainers) == 0:
 				if callback is not None:
 					callback(True)
 					callback = None
@@ -342,6 +364,10 @@ class SoftwareTools(DreamInfoHandler):
 			if len(self.UpdateConsole.appContainers):
 				for name in self.UpdateConsole.appContainers.keys():
 					self.UpdateConsole.kill(name)
+		if self.UpgradeConsole is not None:
+			if len(self.UpgradeConsole.appContainers):
+				for name in self.UpgradeConsole.appContainers.keys():
+					self.UpgradeConsole.kill(name)
 		self.ipkg.cleanupPackageData()
 
 	def verifyPrerequisites(self, prerequisites):
@@ -354,5 +380,6 @@ class SoftwareTools(DreamInfoHandler):
 				return False
 		return True
 
+
 iSoftwareTools = SoftwareTools()
 iSoftwareTools.cleanupSoftwareTools()
diff --git a/usr/lib/enigma2/python/Plugins/SystemPlugins/SoftwareManager/plugin.py b/usr/lib/enigma2/python/Plugins/SystemPlugins/SoftwareManager/plugin.py
index 87f4908..295c40d 100644
--- a/usr/lib/enigma2/python/Plugins/SystemPlugins/SoftwareManager/plugin.py
+++ b/usr/lib/enigma2/python/Plugins/SystemPlugins/SoftwareManager/plugin.py
@@ -1,5 +1,4 @@
 from Plugins.Plugin import PluginDescriptor
-from Screens.Console import Console
 from Screens.ChoiceBox import ChoiceBox
 from Screens.MessageBox import MessageBox
 from Screens.Screen import Screen
@@ -17,7 +16,6 @@ from Components.Harddisk import harddiskmanager
 from Components.config import config,getConfigListEntry, ConfigSubsection, ConfigText, ConfigLocations, ConfigSelection
 from Components.ConfigList import ConfigListScreen
 from Components.Console import Console
-from Components.MultiContent import MultiContentEntryText, MultiContentEntryPixmapAlphaTest
 from Components.SelectionList import SelectionList
 from Components.PluginComponent import plugins
 from Components.DreamInfoHandler import DreamInfoHandler
@@ -27,7 +25,7 @@ from Components.Network import iNetwork
 from Tools.Directories import resolveFilename, SCOPE_PLUGINS, SCOPE_CURRENT_PLUGIN, SCOPE_CURRENT_SKIN, SCOPE_METADIR
 from Tools.LoadPixmap import LoadPixmap
 from Tools.NumericalTextInput import NumericalTextInput
-from enigma import eTimer, quitMainloop, RT_HALIGN_LEFT, RT_VALIGN_CENTER, gFont, getDesktop, ePicLoad, getPrevAsciiCode, eEnv
+from enigma import eTimer, quitMainloop, getDesktop, ePicLoad, getPrevAsciiCode, eEnv
 from cPickle import dump, load
 from os import path as os_path, stat, mkdir, makedirs, listdir, access, remove, W_OK, R_OK, F_OK
 from time import time
@@ -120,6 +118,7 @@ class UpdatePluginMenu(Screen):
 		self.menutext = _("Press MENU on your remote control for additional options.")
 		self.infotext = _("Press INFO on your remote control for additional information.")
 		self.text = ""
+		self.device_name = iSoftwareTools.hardware_info.device_name
 		self.backupdirs = ' '.join( config.plugins.configurationbackup.backupdirs.value )
 		if self.menu == 0:
 			print "building menu entries"
@@ -190,29 +189,6 @@ class UpdatePluginMenu(Screen):
 	def setWindowTitle(self):
 		self.setTitle(_("Software management"))
 
-	# never called yet!?!
-	def cleanup(self):
-		iNetwork.stopPingConsole()
-		iSoftwareTools.cleanupSoftwareTools()
-
-	def getUpdateInfos(self):
-		self.text = ""
-		if iSoftwareTools.NetworkConnectionAvailable == True:
-			if iSoftwareTools.list_updating is False:
-				if iSoftwareTools.available_updates is not 0:
-					self.text = _("There are at least ") + str(iSoftwareTools.available_updates) + _(" updates available.")
-				else:
-					self.text = "" #_("There are no updates available.")
-			else:
-				if iSoftwareTools.available_updates is not 0:
-					self.text = _("There are at least ") + str(iSoftwareTools.available_updates) + _(" updates available.")
-				else:
-					self.text = ""  #_("There are no updates available.")
-				self.text += "\n" + _("A search for available updates is currently in progress.")
-		else:
-			self.text = _("No network connection available.")
-		self["status"].setText(self.text)
-
 	def handleMenu(self):
 		self.session.open(SoftwareManagerSetup)
 		
@@ -578,6 +554,8 @@ class PluginManager(Screen, DreamInfoHandler):
 		self.currentSelectedPackage = None
 		self.saved_currentSelectedPackage = None
 		self.restartRequired = False
+		self.rebootRequired = False
+		self.device_name = iSoftwareTools.hardware_info.device_name
 
 		self.onShown.append(self.setWindowTitle)
 		self.onLayoutFinish.append(self.getUpdateInfos)
@@ -929,13 +907,45 @@ class PluginManager(Screen, DreamInfoHandler):
 	def runExecute(self, result = None):
 		if result is not None:
 			if result[0] is True:
-				self.session.openWithCallback(self.runExecuteFinished, Ipkg, cmdList = self.cmdList)
+				upgradeNeeded = False
+				if self.device_name in ("dm500hd", "dm800se"):
+					print "dm500/dm800se detected. opkgfb needed for upgrade"
+					for entry in self.cmdList:
+						if entry[0] == IpkgComponent.CMD_UPGRADE:
+							upgradeNeeded = True
+				if upgradeNeeded:
+					opkgfb_cmdfile = '/tmp/opkgfb_cmds'
+					fp = file(opkgfb_cmdfile, 'w')
+					for entry in self.cmdList:
+						if entry[0] == IpkgComponent.CMD_INSTALL:
+							if entry[1].has_key("package"):
+								fp.write("install " + entry[1]["package"] + "\n")
+						if entry[0] == IpkgComponent.CMD_REMOVE:
+							if entry[1].has_key("package"):
+								fp.write("remove " + entry[1]["package"] + "\n")
+					fp.close()
+					for package in iSoftwareTools.upgradable_packages.keys():
+						if any(package.endswith(x) for x in iSoftwareTools.reboot_required_packages ):
+							self.rebootRequired = True
+					if self.rebootRequired:
+						self.session.openWithCallback(self.runUpgrade, MessageBox, _("In order to perform the upgrade, Enigma2 will now be stopped and the update tool will be started.")+"\n"+_("Enigma2 will restart automatically upon completion!"))
+					else:
+						self.session.openWithCallback(self.runUpgrade, MessageBox, _("In order to perform the upgrade, Enigma2 will now be stopped and the update tool will be started.")+"\n"+_("Your Dreambox will reboot automatically upon completion!"))
+				else:
+					self.session.openWithCallback(self.runExecuteFinished, Ipkg, cmdList = self.cmdList)
 			elif result[0] is False:
 				self.cmdList = result[1]
 				self.session.openWithCallback(self.runExecuteFinished, Ipkg, cmdList = self.cmdList)
 		else:
 			self.close()
 
+	def runUpgrade(self, result):
+		if result:
+			if self.rebootRequired:
+				quitMainloop(7)
+			else:
+				quitMainloop(6)
+
 	def runExecuteFinished(self):
 		self.reloadPluginlist()
 
@@ -1380,7 +1390,9 @@ class UpdatePlugin(Screen):
 		self.ipkg.addCallback(self.ipkgCallback)
 
 		self.updating = False
-
+		self.rebootRequired = False
+		self.device_name = iSoftwareTools.hardware_info.device_name
+		
 		self["actions"] = ActionMap(["WizardActions"], 
 		{
 			"ok": self.exit,
@@ -1390,8 +1402,10 @@ class UpdatePlugin(Screen):
 		iNetwork.checkNetworkState(self.checkNetworkCB)
 		self.onClose.append(self.cleanup)
 
+
 	def cleanup(self):
 		iNetwork.stopPingConsole()
+		iSoftwareTools.cleanupSoftwareTools()
 
 	def checkNetworkCB(self,data):
 		if data is not None:
@@ -1443,11 +1457,7 @@ class UpdatePlugin(Screen):
 			self.error += 1
 		elif event == IpkgComponent.EVENT_DONE:
 			if self.updating:
-				self.updating = False
-				upgrade_args = {'use_maintainer' : True, 'test_only': False}
-				if config.plugins.softwaremanager.overwriteConfigFiles.value == 'N':
-					upgrade_args = {'use_maintainer' : False, 'test_only': False}
-				self.ipkg.startCmd(IpkgComponent.CMD_UPGRADE, args = upgrade_args)
+				iSoftwareTools.listUpgradable(self.listUpgradableCB)
 			elif self.error == 0:
 				self.slider.setValue(4)
 				
@@ -1468,6 +1478,38 @@ class UpdatePlugin(Screen):
 		#print event, "-", param
 		pass
 
+	def listUpgradableCB(self, res):
+		if iSoftwareTools.upgradeAvailable is False:
+			self.updating = False
+			self.slider.setValue(4)
+			self.activityTimer.stop()
+			self.activityslider.setValue(0)
+			self.package.setText(_("Done - No updates available."))
+			self.status.setText(self.oktext)
+		else:
+			if self.device_name in ("dm500hd", "dm800se"):
+				print "dm500/dm800se detected. opkgfb needed for upgrade"
+				for package in iSoftwareTools.upgradable_packages.keys():
+					if any(package.endswith(x) for x in iSoftwareTools.reboot_required_packages ):
+						self.rebootRequired = True
+				if self.rebootRequired:
+					self.session.openWithCallback(self.runUpgrade, MessageBox, _("In order to perform the upgrade, Enigma2 will now be stopped and the update tool will be started.")+"\n"+_("Enigma2 will restart automatically upon completion!"))
+				else:
+					self.session.openWithCallback(self.runUpgrade, MessageBox, _("In order to perform the upgrade, Enigma2 will now be stopped and the update tool will be started.")+"\n"+_("Your Dreambox will reboot automatically upon completion!"))
+			else:
+				self.updating = False
+				upgrade_args = {'use_maintainer' : True, 'test_only': False}
+				if config.plugins.softwaremanager.overwriteConfigFiles.value == 'N':
+					upgrade_args = {'use_maintainer' : False, 'test_only': False}
+				self.ipkg.startCmd(IpkgComponent.CMD_UPGRADE, args = upgrade_args)
+
+	def runUpgrade(self, result):
+		if result:
+			if self.rebootRequired:
+				quitMainloop(7)
+			else:
+				quitMainloop(6)
+
 	def modificationCallback(self, res):
 		self.ipkg.write(res and "N" or "Y")
 
@@ -1880,7 +1922,7 @@ class PacketManager(Screen, NumericalTextInput):
 				self.list_updating = False
 				if not self.Console:
 					self.Console = Console()
-				cmd = "opkg list"
+				cmd = "cd /tmp && opkg list"
 				self.Console.ePopen(cmd, self.IpkgList_Finished)
 		#print event, "-", param
 		pass
@@ -1903,7 +1945,7 @@ class PacketManager(Screen, NumericalTextInput):
 
 		if not self.Console:
 			self.Console = Console()
-		cmd = "opkg list-installed"
+		cmd = "cd /tmp && opkg list-installed"
 		self.Console.ePopen(cmd, self.IpkgListInstalled_Finished)
 
 	def IpkgListInstalled_Finished(self, result, retval, extra_args = None):
@@ -1918,7 +1960,7 @@ class PacketManager(Screen, NumericalTextInput):
 					self.installed_packetlist[name] = version
 		if not self.Console:
 			self.Console = Console()
-		cmd = "opkg list-upgradable"
+		cmd = "cd /tmp && opkg list-upgradable"
 		self.Console.ePopen(cmd, self.OpkgListUpgradeable_Finished)
 
 	def OpkgListUpgradeable_Finished(self, result, retval, extra_args = None):
-- 
1.7.10.4

