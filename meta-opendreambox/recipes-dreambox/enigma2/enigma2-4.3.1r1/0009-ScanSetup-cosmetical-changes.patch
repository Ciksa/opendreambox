From 5fc073ef7bcc8e8811390fbd30e6350cbdd54d93 Mon Sep 17 00:00:00 2001
From: ghost <andreas.monzner@dream-property.net>
Date: Tue, 28 Mar 2017 13:22:40 +0200
Subject: [PATCH 9/9] ScanSetup: cosmetical changes - try to hold scan type on
 tuner system change when possible - only show DVB-S/DVB-S2 and DVB-T/DVB-T2
 when needed (single transponder search)

---
 usr/lib/enigma2/python/Screens/ScanSetup.py | 49 ++++++++++++++++++++++++++++++++++++-----
 1 file changed, 43 insertions(+), 6 deletions(-)

diff --git a/usr/lib/enigma2/python/Screens/ScanSetup.py b/usr/lib/enigma2/python/Screens/ScanSetup.py
index 8e9ce7b..8442bcf 100644
--- a/usr/lib/enigma2/python/Screens/ScanSetup.py
+++ b/usr/lib/enigma2/python/Screens/ScanSetup.py
@@ -1265,6 +1265,11 @@ class ScanSetup(ConfigListScreen, Screen, TransponderSearchSupport, CableTranspo
 		if self.scan_nims == [ ]:
 			return
 
+		try:
+			oldTypeOfScan = self.typeOfScanEntry[1].value
+		except:
+			oldTypeOfScan = None
+
 		self.typeOfScanEntry = None
 		self.plpidAutoEntry = None
 		self.fecEntry = None
@@ -1283,6 +1288,25 @@ class ScanSetup(ConfigListScreen, Screen, TransponderSearchSupport, CableTranspo
 			self.typeOfScanEntry = getConfigListEntry(_("Type of scan"), self.scan_typeterrestrial)
 			self.list.append(self.typeOfScanEntry)
 
+		# try to use the same scan type after system change
+		current = self.typeOfScanEntry[1].value
+		if oldTypeOfScan and current != oldTypeOfScan:
+			# we map complete to multisat_yes and vice versa
+			if oldTypeOfScan == "complete" and self.scan_system.value in ("DVB-S", "DVB-S2"):
+				oldTypeOfScan = "multisat_yes"
+			elif oldTypeOfScan == "multisat_yes" and self.scan_system.value in ("DVB-T", "DVB-T2", "DVB-C"):
+				oldTypeOfScan = "complete"
+			choices = self.typeOfScanEntry[1].getChoices()
+			for ch in choices:
+				if ch[0] == oldTypeOfScan:
+					self.typeOfScanEntry[1].value = oldTypeOfScan
+					break
+
+		if self.typeOfScanEntry[1].value == 'single_transponder':
+			self.scan_system.setChoices(self.systems)
+		else:
+			self.scan_system.setChoices(self.systems_filtered)
+
 		if len(self.scan_system.getChoices()) > 1:
 			self.systemEntry = getConfigListEntry(_('System'), self.scan_system)
 			self.list.append(self.systemEntry)
@@ -1403,10 +1427,10 @@ class ScanSetup(ConfigListScreen, Screen, TransponderSearchSupport, CableTranspo
 			pass
 		elif cur == self.typeOfScanEntry or \
 			cur == self.tunerEntry or \
-			cur == self.systemEntry or \
-			(self.modulationEntry and self.systemEntry[1].value == "DVB-S2" and cur == self.modulationEntry) or \
+			(self.systemEntry and cur == self.systemEntry) or \
+			(self.modulationEntry and cur == self.modulationEntry) or \
 			(self.satelliteEntry and cur == self.satelliteEntry) or \
-			(self.plpidAutoEntry and self.systemEntry[1].value == "DVB-T2" and cur == self.plpidAutoEntry):
+			(self.plpidAutoEntry and cur == self.plpidAutoEntry):
 			self.createSetup()
 
 	def nimChanged(self, configElement):
@@ -1415,20 +1439,33 @@ class ScanSetup(ConfigListScreen, Screen, TransponderSearchSupport, CableTranspo
 		nim = nimmanager.nim_slots[nim_idx]
 
 		systems = [ ]
+		systems_filtered = [ ]
 		if 'S' in self.systems_enabled:
-			if nim.isEnabled("DVB-S2"):
+			s2_en = nim.isEnabled("DVB-S2")
+			if s2_en:
 				systems.append(("DVB-S2", _("DVB-S2")))
+				systems_filtered.append(("DVB-S2", _("DVB-S2")))
 			if nim.isEnabled("DVB-S"):
 				systems.append(("DVB-S", _("DVB-S")))
+				if not s2_en:
+					systems_filtered.append(("DVB-S", _("DVB-S")))
 
 		if 'C' in self.systems_enabled and nim.isEnabled("DVB-C"):
 			systems.append(("DVB-C", _("DVB-C")))
+			systems_filtered.append(("DVB-C", _("DVB-C")))
 
 		if 'T' in self.systems_enabled:
+			t2_en = nim.isEnabled("DVB-T2")
+			if t2_en:
+				systems.append(("DVB-T2", _("DVB-T2")))
+				systems_filtered.append(("DVB-T2", _("DVB-T2")))
 			if nim.isEnabled("DVB-T"):
 				systems.append(("DVB-T", _("DVB-T")))
-			if nim.isEnabled("DVB-T2"):
-				systems.append(("DVB-T2", _("DVB-T2")))
+				if not t2_en:
+					systems_filtered.append(("DVB-T", _("DVB-T")))
+
+		self.systems = systems
+		self.systems_filtered = systems_filtered
 
 		# for compability with old plugins...
 		self.scan_sat.system = ConfigSelection(default = eDVBFrontendParametersSatellite.System_DVB_S, choices = [
-- 
2.1.4

