From 2c1f690796111bd369fccf2d39b3893f30e1870b Mon Sep 17 00:00:00 2001
From: ghost <andreas.monzner@dream-property.net>
Date: Sun, 8 Feb 2015 09:45:51 +0100
Subject: [PATCH] set priority of our kernel demux threads on e2 start (ask
 the linux people why sched_setscheduler is only usable from
 GPL kernel modules)

---
 mytest.py |   46 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 46 insertions(+)

diff --git a/usr/lib/enigma2/python/mytest.py b/usr/lib/enigma2/python/mytest.py
index 87bbf82..5886609 100644
--- a/usr/lib/enigma2/python/mytest.py
+++ b/usr/lib/enigma2/python/mytest.py
@@ -735,8 +735,54 @@ Screens.Ci.InitCiConfig()
 #t_conn = t.timeout.connect(dump_malloc_stats)
 #t.start(1000)
 
+from threading import Thread
+class FixDemuxThread(Thread):
+	def __init__(self):
+		Thread.__init__(self)
+		self.start()
+
+	def process_num(self, name):
+		# this is a bad example... please dont use popen in enigma2
+		from os import popen
+		f = popen('pidof %s' % name, 'r')
+		if f is not None:
+			stdin = f.read()
+			ret = f.close()
+			if ret is None:
+				return int(stdin)
+		return None
+
+	def run(self):
+		# this fixes the infrequently broken recordings (missing ts packets in record file)
+		# when "rave record buffer overflow detected" messages are visible in kernel log
+		# (when multiple recordings are running at the same time)
+		#
+		# under normal circumstances i would prefer to do this in our kernel hardware drivers
+		# but the linux people only allow to call sched_setscheduler from GPL kernel modules
+		# so we must do it via userspace syscall
+		SCHED_FIFO = 1
+		import ctypes, ctypes.util
+		c = ctypes.cdll.LoadLibrary(ctypes.util.find_library('c'))
+		class _SchedParams(ctypes.Structure):
+			_fields_ = [('sched_priority', ctypes.c_int)]
+		# set prio of dmxX processes to same prio as linux threaded interrupts
+		prio = c.sched_get_priority_max(SCHED_FIFO) / 2 + 1
+		schedParams = _SchedParams(prio)
+		params = ctypes.byref(schedParams)
+		process_num = self.process_num
+		x = 0
+		while True:
+			pid = process_num('dmx%d' %x)
+			if pid is None:
+				break
+			if c.sched_setscheduler(pid, SCHED_FIFO, params) == -1:
+				print "sched_setscheduler failed for dmx%d" %x
+			x += 1
+
 # first, setup a screen
 try:
+	thread = FixDemuxThread()
+
 	runScreenTest()
 
 	plugins.shutdown()
-- 
1.7.10.4

