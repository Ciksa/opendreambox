From f0ad0b66c84cec127856dc7f036f6d154457d5a6 Mon Sep 17 00:00:00 2001
From: ghost <andreas.monzner@dream-property.net>
Date: Sat, 7 Dec 2013 13:25:18 +0100
Subject: [PATCH 5/7] when the time is not valid after bootup and idle mode is
 requested start previous running service (with disabled
 tv outputs) until the a valid time is received via dvb

---
 usr/lib/enigma2/python/Screens/Standby.py |   24 +++++++++++++++++++++++-
 1 file changed, 23 insertions(+), 1 deletion(-)

diff --git a/usr/lib/enigma2/python/Screens/Standby.py b/usr/lib/enigma2/python/Screens/Standby.py
index 447f71c..c6e5c0f 100644
--- a/usr/lib/enigma2/python/Screens/Standby.py
+++ b/usr/lib/enigma2/python/Screens/Standby.py
@@ -4,7 +4,7 @@ from Components.config import config
 from Components.AVSwitch import AVSwitch
 from Components.SystemInfo import SystemInfo
 from GlobalActions import globalActionMap
-from enigma import eDVBVolumecontrol
+from enigma import eDVBVolumecontrol, eDVBLocalTimeHandler, eServiceReference
 
 inStandby = None
 
@@ -49,6 +49,8 @@ class Standby(Screen):
 
 		self.paused_service = None
 		self.prev_running_service = None
+		self.connected_time_handler = False
+
 		if self.session.current_dialog:
 			if self.session.current_dialog.ALLOW_SUSPEND == Screen.SUSPEND_STOPS:
 				#get currently playing service reference
@@ -67,9 +69,29 @@ class Standby(Screen):
 		self.onFirstExecBegin.append(self.__onFirstExecBegin)
 		self.onClose.append(self.__onClose)
 
+		if config.misc.standbyCounter.value == 0 and config.misc.useTransponderTime.value:
+			th = eDVBLocalTimeHandler.getInstance()
+			if not th.ready():
+				refstr = config.servicelist.lastmode.value == 'tv' and config.tv.lastservice.value or config.radio.lastservice.value
+				ref = eServiceReference(refstr)
+				if ref.valid():
+					th.m_timeUpdated.get().append(self.timeReady)
+					self.connected_time_handler = True
+					self.session.nav.playService(ref)
+
+	def timeReady(self):
+		if self.connected_time_handler:
+			th = eDVBLocalTimeHandler.getInstance()
+			th.m_timeUpdated.get().remove(self.timeReady)
+			self.connected_time_handler = False
+			self.session.nav.stopService()
+
 	def __onClose(self):
 		global inStandby
 		inStandby = None
+
+		self.timeReady()
+
 		if not self.session.shutdown:
 			if self.prev_running_service:
 				self.session.nav.playService(self.prev_running_service)
-- 
1.7.10.4

