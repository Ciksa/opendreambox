diff -Naur gst-plugins-bad-1.10.4.orig/ext/rtmp/gstrtmpsrc.c gst-plugins-bad-1.10.4/ext/rtmp/gstrtmpsrc.c
--- gst-plugins-bad-1.10.4.orig/ext/rtmp/gstrtmpsrc.c	2016-11-04 18:07:13.000000000 +0100
+++ gst-plugins-bad-1.10.4/ext/rtmp/gstrtmpsrc.c	2018-11-14 20:07:56.247099524 +0100
@@ -52,6 +52,11 @@
 #include <string.h>
 
 #include <gst/gst.h>
+#define _GNU_SOURCE
+#include <unistd.h>
+#include <sys/syscall.h>
+#include <sys/types.h>
+#include <signal.h>
 
 #ifdef G_OS_WIN32
 #include <winsock2.h>
@@ -168,6 +173,7 @@
 
   rtmpsrc->cur_offset = 0;
   rtmpsrc->last_timestamp = 0;
+  rtmpsrc->read_tid = -1;
   rtmpsrc->timeout = DEFAULT_TIMEOUT;
 
   gst_base_src_set_format (GST_BASE_SRC (rtmpsrc), GST_FORMAT_TIME);
@@ -311,6 +317,11 @@
   }
 }
 
+static void
+signal_handler (int x)
+{
+}
+
 /*
  * Read a new buffer from src->reqoffset, takes care of events
  * and seeking and such.
@@ -318,6 +329,9 @@
 static GstFlowReturn
 gst_rtmp_src_create (GstPushSrc * pushsrc, GstBuffer ** buffer)
 {
+  static __thread gboolean tid_read;
+  static __thread pid_t tid;
+  struct sigaction act;
   GstRTMPSrc *src;
   GstBuffer *buf;
   GstMapInfo map;
@@ -346,6 +360,17 @@
   data = map.data;
   bsize = 0;
 
+  if (!tid_read) {
+    tid = syscall (SYS_gettid);
+    tid_read = TRUE;
+  }
+
+  src->read_tid = tid;
+
+  act.sa_handler = signal_handler;
+  act.sa_flags = 0;
+  sigaction (SIGUSR1, &act, 0);
+
   while (todo > 0) {
     int read = RTMP_Read (src->rtmp, (char *) data, todo);
 
@@ -370,6 +395,11 @@
   }
   gst_buffer_unmap (buf, &map);
   gst_buffer_resize (buf, 0, bsize);
+  src->read_tid = -1;
+
+  act.sa_handler = SIG_DFL;
+  act.sa_flags = 0;
+  sigaction (SIGUSR1, &act, 0);
 
   if (src->discont) {
     GST_BUFFER_FLAG_SET (buf, GST_BUFFER_FLAG_DISCONT);
@@ -629,18 +659,22 @@
 {
   GstRTMPSrc *rtmpsrc = GST_RTMP_SRC (basesrc);
 
-  GST_DEBUG_OBJECT (rtmpsrc, "unlock");
-
   /* This closes the socket, which means that any pending socket calls
    * error out. */
-  if (rtmpsrc->rtmp) {
-    RTMP_Close (rtmpsrc->rtmp);
+
+  if (rtmpsrc && rtmpsrc->read_tid != -1) {
+    int ret;
+    GST_DEBUG_OBJECT (rtmpsrc,
+        "setting RTMP_ctrlC and attempting to kill read_tid %i...",
+        rtmpsrc->read_tid);
+    RTMP_ctrlC = TRUE;
+    ret = kill (rtmpsrc->read_tid, SIGUSR1);
+    GST_DEBUG_OBJECT (rtmpsrc, "kill returned %i (%s)", ret, strerror (errno));
   }
 
   return TRUE;
 }
 
-
 static gboolean
 gst_rtmp_src_stop (GstBaseSrc * basesrc)
 {
@@ -649,6 +683,7 @@
   src = GST_RTMP_SRC (basesrc);
 
   if (src->rtmp) {
+    RTMP_ctrlC = FALSE;
     RTMP_Free (src->rtmp);
     src->rtmp = NULL;
   }
diff -Naur gst-plugins-bad-1.10.4.orig/ext/rtmp/gstrtmpsrc.h gst-plugins-bad-1.10.4/ext/rtmp/gstrtmpsrc.h
--- gst-plugins-bad-1.10.4.orig/ext/rtmp/gstrtmpsrc.h	2016-11-04 18:07:13.000000000 +0100
+++ gst-plugins-bad-1.10.4/ext/rtmp/gstrtmpsrc.h	2018-11-14 20:06:39.303101306 +0100
@@ -68,6 +68,8 @@
   GstClockTime last_timestamp;
   gboolean seekable;
   gboolean discont;
+
+  pid_t read_tid;
 };
 
 struct _GstRTMPSrcClass
