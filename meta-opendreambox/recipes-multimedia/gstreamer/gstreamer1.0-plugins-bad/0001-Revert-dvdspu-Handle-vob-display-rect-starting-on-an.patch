From 632964e08d2541a49667ad438755d4d67f6814d4 Mon Sep 17 00:00:00 2001
From: Andreas Monzner <andreas.monzner@dream-property.net>
Date: Thu, 1 Nov 2018 14:05:43 +0100
Subject: [PATCH 1/7] Revert "dvdspu: Handle vob display rect starting on an
 odd line"

This reverts commit cf777e8ceede1320a1bdd614400c95b3281fd3f8.
---
 gst/dvdspu/gstspu-vobsub-render.c | 56 +++++++--------------------------------
 1 file changed, 10 insertions(+), 46 deletions(-)

diff --git a/gst/dvdspu/gstspu-vobsub-render.c b/gst/dvdspu/gstspu-vobsub-render.c
index f4649e9..d55b1bf 100644
--- a/gst/dvdspu/gstspu-vobsub-render.c
+++ b/gst/dvdspu/gstspu-vobsub-render.c
@@ -426,7 +426,6 @@ gstspu_vobsub_render (GstDVDSpu * dvdspu, GstVideoFrame * frame)
   gint y, last_y;
   gint width, height;
   gint strides[3];
-  gint offset_index = 0;
 
   /* Set up our initial state */
   if (G_UNLIKELY (state->vobsub.pix_buf == NULL))
@@ -535,7 +534,7 @@ gstspu_vobsub_render (GstDVDSpu * dvdspu, GstVideoFrame * frame)
     state->vobsub.clip_rect.top = state->vobsub.disp_rect.top;
     state->vobsub.clip_rect.bottom = state->vobsub.disp_rect.bottom;
 
-    /* clip bottom after the shift */
+    /* clip right after the shift */
     if (state->vobsub.clip_rect.bottom >= height)
       state->vobsub.clip_rect.bottom = height - 1;
 
@@ -546,48 +545,18 @@ gstspu_vobsub_render (GstDVDSpu * dvdspu, GstVideoFrame * frame)
 
   /* We start rendering from the first line of the display rect */
   y = state->vobsub.disp_rect.top;
-  /* We render most lines in pairs starting from an even y,
+  /* start_y is always an even number and we render lines in pairs from there,
    * accumulating 2 lines of chroma then blending it. We might need to render a
-   * single line at the start and end if the display rect starts on an odd line
-   * or ends on an even one */
-  if (y > state->vobsub.disp_rect.bottom)
-    return;                     /* Empty clip rect, nothing to do */
+   * single line at the end if the display rect ends on an even line too. */
+  last_y = (state->vobsub.disp_rect.bottom - 1) & ~(0x01);
 
   /* Update our plane references to the first line of the disp_rect */
   planes[0] += strides[0] * y;
   planes[1] += strides[1] * (y / 2);
   planes[2] += strides[2] * (y / 2);
 
-  /* If the render rect starts on an odd line, render that only to start */
-  state->vobsub.cur_Y = y;
-  if (state->vobsub.cur_Y & 0x1) {
-    gboolean clip, visible = FALSE;
-
-    clip = (state->vobsub.cur_Y < state->vobsub.clip_rect.top
-        || state->vobsub.cur_Y > state->vobsub.clip_rect.bottom);
-
-    if (!clip) {
-      /* Render a first odd line. */
-      gstspu_vobsub_clear_comp_buffers (state);
-      state->vobsub.comp_last_x_ptr = state->vobsub.comp_last_x + 1;
-      visible |=
-          gstspu_vobsub_render_line (state, planes,
-          &state->vobsub.cur_offsets[offset_index]);
-      if (visible)
-        gstspu_vobsub_blend_comp_buffers (state, planes);
-    }
-
-    /* Update all the output pointers */
-    state->vobsub.cur_Y++;
-    planes[0] += strides[0];
-    planes[1] += strides[1];
-    planes[2] += strides[2];
-    /* Switch the offset index 0 <=> 1 */
-    offset_index ^= 0x1;
-  }
-
-  last_y = (state->vobsub.disp_rect.bottom - 1) & ~(0x01);
-  for (; state->vobsub.cur_Y <= last_y; state->vobsub.cur_Y++) {
+  for (state->vobsub.cur_Y = y; state->vobsub.cur_Y <= last_y;
+      state->vobsub.cur_Y++) {
     gboolean clip, visible = FALSE;
 
     clip = (state->vobsub.cur_Y < state->vobsub.clip_rect.top
@@ -597,13 +566,10 @@ gstspu_vobsub_render (GstDVDSpu * dvdspu, GstVideoFrame * frame)
     gstspu_vobsub_clear_comp_buffers (state);
     /* Render even line */
     state->vobsub.comp_last_x_ptr = state->vobsub.comp_last_x;
-    gstspu_vobsub_render_line (state, planes,
-        &state->vobsub.cur_offsets[offset_index]);
+    gstspu_vobsub_render_line (state, planes, &state->vobsub.cur_offsets[0]);
 
     /* Advance the luminance output pointer */
     planes[0] += strides[0];
-    /* Switch the offset index 0 <=> 1 */
-    offset_index ^= 0x1;
 
     state->vobsub.cur_Y++;
 
@@ -611,7 +577,7 @@ gstspu_vobsub_render (GstDVDSpu * dvdspu, GstVideoFrame * frame)
     state->vobsub.comp_last_x_ptr = state->vobsub.comp_last_x + 1;
     visible |=
         gstspu_vobsub_render_line (state, planes,
-        &state->vobsub.cur_offsets[offset_index]);
+        &state->vobsub.cur_offsets[1]);
 
     if (visible && !clip) {
       /* Blend the accumulated UV compositing buffers onto the output */
@@ -622,8 +588,6 @@ gstspu_vobsub_render (GstDVDSpu * dvdspu, GstVideoFrame * frame)
     planes[0] += strides[0];
     planes[1] += strides[1];
     planes[2] += strides[2];
-    /* Switch the offset index 0 <=> 1 */
-    offset_index ^= 0x1;
   }
 
   if (state->vobsub.cur_Y == state->vobsub.disp_rect.bottom) {
@@ -632,7 +596,7 @@ gstspu_vobsub_render (GstDVDSpu * dvdspu, GstVideoFrame * frame)
     clip = (state->vobsub.cur_Y < state->vobsub.clip_rect.top
         || state->vobsub.cur_Y > state->vobsub.clip_rect.bottom);
 
-    g_return_if_fail ((state->vobsub.disp_rect.bottom & 0x01) == 0);
+    g_assert ((state->vobsub.disp_rect.bottom & 0x01) == 0);
 
     if (!clip) {
       /* Render a remaining lone last even line. y already has the correct value
@@ -641,7 +605,7 @@ gstspu_vobsub_render (GstDVDSpu * dvdspu, GstVideoFrame * frame)
       state->vobsub.comp_last_x_ptr = state->vobsub.comp_last_x;
       visible |=
           gstspu_vobsub_render_line (state, planes,
-          &state->vobsub.cur_offsets[offset_index]);
+          &state->vobsub.cur_offsets[0]);
       if (visible)
         gstspu_vobsub_blend_comp_buffers (state, planes);
     }
-- 
2.1.4

