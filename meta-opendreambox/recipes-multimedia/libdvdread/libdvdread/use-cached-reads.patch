--- libdvdread.org/src/dvd_input.c	2013-11-16 23:50:10.000000000 +0100
+++ libdvdread/src/dvd_input.c	2013-11-17 13:56:36.000000000 +0100
@@ -71,7 +71,8 @@
   dvdcss_handle dvdcss;
 
   /* dummy file input */
-  int fd;
+  FILE *f;
+  void *buf;
 };
 
 
@@ -164,17 +165,21 @@
     return NULL;
   }
 
-  /* Open the device */
-#if !defined(WIN32) && !defined(__OS2__)
-  dev->fd = open(target, O_RDONLY);
-#else
-  dev->fd = open(target, O_RDONLY | O_BINARY);
-#endif
-  if(dev->fd < 0) {
+  dev->f = fopen(target, "r");
+  if(!dev->f) {
     perror("libdvdread: Could not open input");
     free(dev);
     return NULL;
   }
+  else {
+    dev->buf = malloc(128*1024);
+    if (dev->buf) {
+      if (setvbuf(dev->f, dev->buf, _IOFBF, 128*1024))
+        perror("dvdread setvbuf failed");
+    }
+    else
+      fprintf(stderr, "allocate dvdread buf failed!\n");
+  }
 
   return dev;
 }
@@ -193,14 +198,14 @@
  */
 static int file_seek(dvd_input_t dev, int blocks)
 {
-  off_t pos;
+  int ret;
 
-  pos = lseek(dev->fd, (off_t)blocks * (off_t)DVD_VIDEO_LB_LEN, SEEK_SET);
-  if(pos < 0) {
-    return pos;
-  }
-  /* assert pos % DVD_VIDEO_LB_LEN == 0 */
-  return (int) (pos / DVD_VIDEO_LB_LEN);
+  ret = fseeko(dev->f, (off_t)blocks * (off_t)DVD_VIDEO_LB_LEN, SEEK_SET);
+
+  if(ret < 0)
+    return ret;
+
+  return blocks;
 }
 
 /**
@@ -216,36 +221,19 @@
  */
 static int file_read(dvd_input_t dev, void *buffer, int blocks, int flags)
 {
-  size_t len;
-  ssize_t ret;
-
-  len = (size_t)blocks * DVD_VIDEO_LB_LEN;
+  size_t ret = 0;
+  int blocks_read = 0;
 
-  while(len > 0) {
+  while (blocks_read < blocks) {
+    ret = fread((unsigned char*)buffer + blocks_read * DVD_VIDEO_LB_LEN, DVD_VIDEO_LB_LEN, blocks - blocks_read, dev->f);
 
-    ret = read(dev->fd, buffer, len);
-
-    if(ret < 0) {
-      /* One of the reads failed, too bad.  We won't even bother
-       * returning the reads that went OK, and as in the POSIX spec
-       * the file position is left unspecified after a failure. */
-      return ret;
-    }
+    if (ret <= 0)
+      break;
 
-    if(ret == 0) {
-      /* Nothing more to read.  Return all of the whole blocks, if any.
-       * Adjust the file position back to the previous block boundary. */
-      size_t bytes = (size_t)blocks * DVD_VIDEO_LB_LEN - len;
-      off_t over_read = -(bytes % DVD_VIDEO_LB_LEN);
-      /*off_t pos =*/ lseek(dev->fd, over_read, SEEK_CUR);
-      /* should have pos % 2048 == 0 */
-      return (int) (bytes / DVD_VIDEO_LB_LEN);
-    }
-
-    len -= ret;
+    blocks_read += ret;
   }
 
-  return blocks;
+  return blocks_read ? blocks_read : ret;
 }
 
 /**
@@ -255,11 +243,12 @@
 {
   int ret;
 
-  ret = close(dev->fd);
+  ret = fclose(dev->f);
 
   if(ret < 0)
     return ret;
 
+  free(dev->buf);
   free(dev);
 
   return 0;
